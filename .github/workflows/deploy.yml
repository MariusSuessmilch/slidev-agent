name: Deploy Slidev Agent to GitHub Pages

on:
  workflow_dispatch:
  push:
    branches: [main]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Setup @antfu/ni
        run: npm i -g @antfu/ni

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Generate Fresh Demo Presentation
        run: |
          # Generate one fresh demo presentation
          uv run python -m slide_agent.cli "Python Funktionen" --audience "Studenten" --slide-count 6 --language "de"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Build All Presentations
        run: |
          # Build all presentations in slides folder
          for dir in slides/presentation-*/; do
            if [ -d "$dir" ] && [ -f "$dir/package.json" ]; then
              presentation_name=$(basename "$dir" | sed 's/presentation-//')

              # Skip presentations with special characters that cause URL encoding issues
              if echo "$presentation_name" | grep -q '[√§√∂√º√Ñ√ñ√ú√ü]'; then
                echo "Skipping: $presentation_name (contains special characters)"
                continue
              fi

              echo "Building: $presentation_name"
              cd "$dir"
              npm install
              npm run build -- --base /${{github.event.repository.name}}/$presentation_name/
              cd - > /dev/null
            fi
          done

      - name: Create demo showcase
        run: |
          mkdir -p dist

          # Generate dynamic showcase from all presentations
          cat > dist/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Slidev Agent - AI-Powered Slide Generation</title>
              <style>
                  body {
                      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: 2rem;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                      color: white;
                  }
                  .header {
                      text-align: center;
                      margin-bottom: 3rem;
                  }
                  .header h1 {
                      font-size: 3rem;
                      margin-bottom: 1rem;
                      background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
                      -webkit-background-clip: text;
                      -webkit-text-fill-color: transparent;
                      background-clip: text;
                  }
                  .subtitle {
                      font-size: 1.2rem;
                      opacity: 0.9;
                      margin-bottom: 2rem;
                  }
                  .presentations {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
                      gap: 2rem;
                      margin-bottom: 3rem;
                  }
                  .presentation-card {
                      background: rgba(255, 255, 255, 0.1);
                      backdrop-filter: blur(10px);
                      border-radius: 15px;
                      padding: 2rem;
                      border: 1px solid rgba(255, 255, 255, 0.2);
                      transition: transform 0.3s ease, box-shadow 0.3s ease;
                  }
                  .presentation-card:hover {
                      transform: translateY(-5px);
                      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
                  }
                  .presentation-card h3 {
                      margin-top: 0;
                      color: #4ecdc4;
                      font-size: 1.5rem;
                  }
                  .meta {
                      display: flex;
                      gap: 1rem;
                      margin: 1rem 0;
                      font-size: 0.9rem;
                      opacity: 0.8;
                  }
                  .tag {
                      background: rgba(255, 255, 255, 0.2);
                      padding: 0.25rem 0.75rem;
                      border-radius: 20px;
                      font-size: 0.8rem;
                  }
                  .view-btn {
                      display: inline-block;
                      background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
                      color: white;
                      text-decoration: none;
                      padding: 0.75rem 1.5rem;
                      border-radius: 25px;
                      font-weight: bold;
                      transition: transform 0.2s ease;
                      margin-top: 1rem;
                  }
                  .view-btn:hover {
                      transform: scale(1.05);
                      color: white;
                  }
                  .footer {
                      text-align: center;
                      margin-top: 3rem;
                      padding-top: 2rem;
                      border-top: 1px solid rgba(255, 255, 255, 0.2);
                      opacity: 0.7;
                  }
                  .github-link {
                      color: #4ecdc4;
                      text-decoration: none;
                      font-weight: bold;
                  }
                  .github-link:hover {
                      text-decoration: underline;
                  }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>üéõÔ∏è Slidev Agent</h1>
                  <p class="subtitle">AI-powered slide generation using LangGraph and OpenAI GPT-4o</p>
                  <p>Transform simple topic descriptions into beautiful, interactive Slidev presentations with function calling architecture</p>
              </div>

              <div class="presentations" id="presentations">
                  <!-- Presentations will be dynamically generated -->
              </div>

              <div class="footer">
                  <p>
                      Generated automatically by
                      <a href="https://github.com/MariusSuessmilch/slidev-agent" class="github-link">Slidev Agent</a>
                      using LangGraph, OpenAI GPT-4o, and Slidev
                  </p>
                  <p><strong>M5 Implementation:</strong> Complete CI/CD pipeline with function calling architecture</p>
              </div>
          </body>
          </html>
          EOF

          # Generate presentation cards dynamically
          echo "          <script>" >> dist/index.html
          echo "          const presentations = [" >> dist/index.html

          for dir in slides/presentation-*/; do
            if [ -d "$dir" ] && [ -f "$dir/meta.json" ]; then
              presentation_name=$(basename "$dir" | sed 's/presentation-//')

              # Skip presentations with special characters for URL compatibility
              if echo "$presentation_name" | grep -q '[√§√∂√º√Ñ√ñ√ú√ü]'; then
                echo "Skipping showcase entry: $presentation_name (contains special characters)"
                continue
              fi

              # Extract metadata from meta.json
              title=$(cat "$dir/meta.json" | python3 -c "import sys,json; print(json.load(sys.stdin)['title'])" 2>/dev/null || echo "Unknown Title")
              subtitle=$(cat "$dir/meta.json" | python3 -c "import sys,json; print(json.load(sys.stdin).get('subtitle', ''))" 2>/dev/null || echo "")
              slide_count=$(cat "$dir/meta.json" | python3 -c "import sys,json; print(json.load(sys.stdin)['slide_count'])" 2>/dev/null || echo "0")

              # Infer language and audience from subtitle or metadata
              if echo "$subtitle" | grep -qi "deutsch\|studenten\|german"; then
                language="üá©üá™ Deutsch"
                audience="üéì Studenten"
                view_text="Pr√§sentation anzeigen ‚Üí"
              else
                language="üá∫üá∏ English"
                audience="üéØ Students"
                view_text="View Presentation ‚Üí"
              fi

              # Generate emoji based on topic
              emoji="üìä"
              if echo "$title" | grep -qi "python\|function"; then emoji="üêç"; fi
              if echo "$title" | grep -qi "machine\|learning\|ml"; then emoji="ü§ñ"; fi
              if echo "$title" | grep -qi "web\|development"; then emoji="üåê"; fi
              if echo "$title" | grep -qi "data\|science"; then emoji="üìà"; fi
              if echo "$title" | grep -qi "neural\|network"; then emoji="üß†"; fi
              if echo "$title" | grep -qi "deep"; then emoji="üî•"; fi

              echo "            {" >> dist/index.html
              echo "              title: \"$emoji $title\"," >> dist/index.html
              echo "              description: \"$subtitle\"," >> dist/index.html
              echo "              audience: \"$audience\"," >> dist/index.html
              echo "              language: \"$language\"," >> dist/index.html
              echo "              slideCount: \"$slide_count Slides\"," >> dist/index.html
              echo "              link: \"./$presentation_name/\"," >> dist/index.html
              echo "              viewText: \"$view_text\"" >> dist/index.html
              echo "            }," >> dist/index.html
            fi
          done

          cat >> dist/index.html << 'SCRIPT_EOF'
          ];

          const container = document.getElementById('presentations');
          presentations.forEach(pres => {
            const card = document.createElement('div');
            card.className = 'presentation-card';
            card.innerHTML = `
              <h3>${pres.title}</h3>
              <p>${pres.description || 'AI-generated presentation with comprehensive content and examples.'}</p>
              <div class="meta">
                <span class="tag">${pres.audience}</span>
                <span class="tag">${pres.language}</span>
                <span class="tag">üìÑ ${pres.slideCount}</span>
              </div>
              <a href="${pres.link}" class="view-btn">${pres.viewText}</a>
            `;
            container.appendChild(card);
          });
          </script>
          </body>
          </html>
          SCRIPT_EOF

          # Copy all presentation builds dynamically (skip special characters)
          for dir in slides/presentation-*/; do
            if [ -d "$dir" ] && [ -d "$dir/dist" ]; then
              presentation_name=$(basename "$dir" | sed 's/presentation-//')

              # Skip presentations with special characters
              if echo "$presentation_name" | grep -q '[√§√∂√º√Ñ√ñ√ú√ü]'; then
                echo "Skipping copy: $presentation_name (contains special characters)"
                continue
              fi

              echo "Copying: $presentation_name"
              mkdir -p "dist/$presentation_name"
              cp -r "$dir/dist/"* "dist/$presentation_name/"
            fi
          done

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  smoke-test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Smoke Test - Main Page
        run: |
          URL="${{ needs.deploy.outputs.page_url || 'https://mariussuessmilch.github.io/slidev-agent/' }}"
          echo "Testing main page: $URL"

          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
          echo "HTTP Status: $RESPONSE"

          if [ "$RESPONSE" != "200" ]; then
            echo "‚ùå Smoke test failed: Expected 200, got $RESPONSE"
            exit 1
          fi

          echo "‚úÖ Main page accessible"

      - name: Smoke Test - Demo Presentations
        run: |
          BASE_URL="${{ needs.deploy.outputs.page_url || 'https://mariussuessmilch.github.io/slidev-agent/' }}"

          # Test a few key presentations that should exist
          for demo in python-functions python-funktionen data-science-basics machine-learning-basics; do
            URL="${BASE_URL}${demo}/"
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
            echo "${demo}: $RESPONSE"

            if [ "$RESPONSE" != "200" ]; then
              echo "‚ùå ${demo} demo failed"
              exit 1
            fi
          done

          echo "‚úÖ All demos accessible"
          echo "üöÄ Deployment successful: $BASE_URL"
